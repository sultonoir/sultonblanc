@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 240 10% 3.9%;

    --card: 0 0% 100%;
    --card-foreground: 240 10% 3.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 240 10% 3.9%;

    --primary: 240 5.9% 10%;
    --primary-foreground: 0 0% 98%;

    --secondary: 240 4.8% 95.9%;
    --secondary-foreground: 240 5.9% 10%;

    --muted: 240 4.8% 95.9%;
    --muted-foreground: 240 3.8% 46.1%;

    --accent: 240 4.8% 95.9%;
    --accent-foreground: 240 5.9% 10%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;

    --border: 240 5.9% 90%;
    --input: 240 5.9% 90%;
    --ring: 240 10% 3.9%;

    --radius: 0.5rem;
  }

  .dark {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;

    --card: 240 10% 3.9%;
    --card-foreground: 0 0% 98%;

    --popover: 240 10% 3.9%;
    --popover-foreground: 0 0% 98%;

    --primary: 0 0% 98%;
    --primary-foreground: 240 5.9% 10%;

    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;

    --muted: 240 3.7% 15.9%;
    --muted-foreground: 240 5% 64.9%;

    --accent: 240 3.7% 15.9%;
    --accent-foreground: 0 0% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;

    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;
    --ring: 240 4.9% 83.9%;
  }
}

@layer base {
  * {
    @apply !scroll-smooth border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

@layer base {
  .wrapper {
    --col-width: 130px;

    @apply grid w-full gap-2 md:gap-4;
    grid-template-columns:
      [full-start]
      minmax(0, 100%)
      [wide-start]
      repeat(2, minmax(0, var(--col-width)))
      [narrow-start]
      repeat(8, minmax(0, var(--col-width)))
      [narrow-end]
      repeat(2, minmax(0, var(--col-width)))
      [wide-end]
      minmax(0, 100%)
      [full-end];
  }

  .wrapper > * {
    grid-column: wide;
  }

  .wrapper > .full-bleed {
    grid-column: full;
  }

  @media (min-width: theme("screens.md")) {
    .wrapper > * {
      grid-column: narrow;
    }
  }

  @keyframes fill-text {
    to {
      --progress: 100%;
    }
  }

  @keyframes parallax-movement {
    to {
      transform: translateY(var(--movement));
    }
  }

  /* The @property tells the browser what type this variable is,
    a percentage in our case. If we would not add that here, the
    browser would not be able to animate it from 0% to 100%.
  */
  @property --progress {
    syntax: "<percentage>";
    inherits: false;
    initial-value: 0%;
  }
}

@layer components {
  .reveal-text {
    --faded-color: #ccc;
    --higlighted-color: #111;
    /* Compared to the video, I updated this article to reflect
       a solution that's so much easier. Creating a single gradient
       with two colors, and then animating the starting/end point of
       the two colors with a CSS variable --progress. CSS @property
       makes this so much easier for us now.
    */
    --progress: 0%;
    background-image: linear-gradient(
      to right,
      var(--higlighted-color),
      var(--higlighted-color) var(--progress),
      var(--faded-color) var(--progress),
      var(--faded-color)
    );
    background-clip: text;
    background-repeat: no-repeat;
    color: transparent;
    display: inline;
    animation: fill-text linear both;
    animation-timeline: --reveal-wrapper;
    animation-range: entry 200% cover 80%;
  }

  .parallax-image {
    transform: translateY(0px);
    animation: parallax-movement linear both;
    animation-timeline: --parallax-wrapper;
    animation-range: entry 25% cover 80%;
  }
}
